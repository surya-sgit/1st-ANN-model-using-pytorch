{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4289678,"sourceType":"datasetVersion","datasetId":2527538}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-16T16:43:30.242497Z","iopub.execute_input":"2024-09-16T16:43:30.242850Z","iopub.status.idle":"2024-09-16T16:43:30.678326Z","shell.execute_reply.started":"2024-09-16T16:43:30.242814Z","shell.execute_reply":"2024-09-16T16:43:30.677260Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/diabetes-dataset/diabetes.csv')\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-16T16:44:21.417314Z","iopub.execute_input":"2024-09-16T16:44:21.417739Z","iopub.status.idle":"2024-09-16T16:44:21.446196Z","shell.execute_reply.started":"2024-09-16T16:44:21.417699Z","shell.execute_reply":"2024-09-16T16:44:21.445251Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-16T16:44:59.480457Z","iopub.execute_input":"2024-09-16T16:44:59.481277Z","iopub.status.idle":"2024-09-16T16:44:59.491756Z","shell.execute_reply.started":"2024-09-16T16:44:59.481226Z","shell.execute_reply":"2024-09-16T16:44:59.490675Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nsns.pairplot(df, hue = 'Outcome')","metadata":{"execution":{"iopub.status.busy":"2024-09-16T16:46:13.166010Z","iopub.execute_input":"2024-09-16T16:46:13.166422Z","iopub.status.idle":"2024-09-16T16:46:44.247120Z","shell.execute_reply.started":"2024-09-16T16:46:13.166382Z","shell.execute_reply":"2024-09-16T16:46:44.245793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nx = df.drop('Outcome', axis = 1).values\ny = df['Outcome'].values\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 20)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T16:54:00.238801Z","iopub.execute_input":"2024-09-16T16:54:00.239230Z","iopub.status.idle":"2024-09-16T16:54:00.248004Z","shell.execute_reply.started":"2024-09-16T16:54:00.239190Z","shell.execute_reply":"2024-09-16T16:54:00.246548Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","metadata":{"execution":{"iopub.status.busy":"2024-09-16T17:22:56.327232Z","iopub.execute_input":"2024-09-16T17:22:56.328214Z","iopub.status.idle":"2024-09-16T17:22:56.333047Z","shell.execute_reply.started":"2024-09-16T17:22:56.328168Z","shell.execute_reply":"2024-09-16T17:22:56.331843Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = torch.FloatTensor(X_train)\nX_test = torch.FloatTensor(X_test)\ny_train = torch.LongTensor(y_train)\ny_test = torch.LongTensor(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T17:35:53.861921Z","iopub.execute_input":"2024-09-16T17:35:53.862403Z","iopub.status.idle":"2024-09-16T17:35:53.894980Z","shell.execute_reply.started":"2024-09-16T17:35:53.862350Z","shell.execute_reply":"2024-09-16T17:35:53.894140Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-16T17:37:01.938872Z","iopub.execute_input":"2024-09-16T17:37:01.939314Z","iopub.status.idle":"2024-09-16T17:37:01.945956Z","shell.execute_reply.started":"2024-09-16T17:37:01.939274Z","shell.execute_reply":"2024-09-16T17:37:01.944954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class ANN_Model(nn.Module):\n    \n    def __init__(self, input_features = 8, hidden1 = 25, hidden2 = 50, out_features = 2):\n        super().__init__()\n        self.f_connected1 = nn.Linear(input_features, hidden1)\n        self.f_connected2 = nn.Linear(hidden1, hidden2)\n        self.out = nn.Linear(hidden2, out_features)\n        \n    def forward(self, x):\n        x = F.relu(self.f_connected1(x))\n        x = F.relu(self.f_connected2(x))\n        x = self.out(x)\n        return x","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:46.419800Z","iopub.execute_input":"2024-09-16T19:03:46.420263Z","iopub.status.idle":"2024-09-16T19:03:46.428806Z","shell.execute_reply.started":"2024-09-16T19:03:46.420224Z","shell.execute_reply":"2024-09-16T19:03:46.427457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#intantiate my ANN model\ntorch.manual_seed(20)\nmodel = ANN_Model()","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:48.028688Z","iopub.execute_input":"2024-09-16T19:03:48.029154Z","iopub.status.idle":"2024-09-16T19:03:48.036972Z","shell.execute_reply.started":"2024-09-16T19:03:48.029110Z","shell.execute_reply":"2024-09-16T19:03:48.035952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.parameters","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:48.842675Z","iopub.execute_input":"2024-09-16T19:03:48.843119Z","iopub.status.idle":"2024-09-16T19:03:48.850515Z","shell.execute_reply.started":"2024-09-16T19:03:48.843077Z","shell.execute_reply":"2024-09-16T19:03:48.849240Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#backward propagation -- define the loss function, define the optimiser\nloss_function = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr = 0.01)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:49.657690Z","iopub.execute_input":"2024-09-16T19:03:49.658104Z","iopub.status.idle":"2024-09-16T19:03:49.663979Z","shell.execute_reply.started":"2024-09-16T19:03:49.658067Z","shell.execute_reply":"2024-09-16T19:03:49.662858Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"epochs = 500\nfinal_losses = []\nfor i in range(epochs):\n    i = i + 1\n    y_pred = model.forward(X_train)\n    loss = loss_function(y_pred, y_train)\n    final_losses.append(loss)\n    if i%10 == 1:\n        print(\"Epoch number is {} and the loss is {}\".format(i, loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:50.811518Z","iopub.execute_input":"2024-09-16T19:03:50.811959Z","iopub.status.idle":"2024-09-16T19:03:51.596732Z","shell.execute_reply.started":"2024-09-16T19:03:50.811918Z","shell.execute_reply":"2024-09-16T19:03:51.595627Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#plot the loss function\nimport matplotlib.pyplot as plt\n\nfinal_losses_np = [loss.detach().numpy() for loss in final_losses]\nplt.plot(range(epochs), final_losses_np)\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:53.384870Z","iopub.execute_input":"2024-09-16T19:03:53.385632Z","iopub.status.idle":"2024-09-16T19:03:53.651026Z","shell.execute_reply.started":"2024-09-16T19:03:53.385588Z","shell.execute_reply":"2024-09-16T19:03:53.649909Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#predicting\npredictions = []\nwith torch.no_grad():\n    for i, data in enumerate(X_test):\n        y_pred = model(data)\n        predictions.append(y_pred.argmax().item())\n        print(y_pred.argmax().item())","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:03:57.099397Z","iopub.execute_input":"2024-09-16T19:03:57.099800Z","iopub.status.idle":"2024-09-16T19:03:57.127957Z","shell.execute_reply.started":"2024-09-16T19:03:57.099763Z","shell.execute_reply":"2024-09-16T19:03:57.126926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(predictions, y_test)\ncm","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:04:00.794826Z","iopub.execute_input":"2024-09-16T19:04:00.795608Z","iopub.status.idle":"2024-09-16T19:04:00.805345Z","shell.execute_reply.started":"2024-09-16T19:04:00.795562Z","shell.execute_reply":"2024-09-16T19:04:00.804208Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 5))\nsns.heatmap(cm, annot = True)\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:06:25.110308Z","iopub.execute_input":"2024-09-16T19:06:25.111189Z","iopub.status.idle":"2024-09-16T19:06:25.442258Z","shell.execute_reply.started":"2024-09-16T19:06:25.111142Z","shell.execute_reply":"2024-09-16T19:06:25.440646Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(predictions, y_test)\nscore","metadata":{"execution":{"iopub.status.busy":"2024-09-16T19:07:19.204506Z","iopub.execute_input":"2024-09-16T19:07:19.205334Z","iopub.status.idle":"2024-09-16T19:07:19.214103Z","shell.execute_reply.started":"2024-09-16T19:07:19.205279Z","shell.execute_reply":"2024-09-16T19:07:19.212972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}